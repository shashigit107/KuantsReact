{"version":3,"sources":["ChildCmp.js","Data.js","Comp.js","App.js","reportWebVitals.js","index.js"],"names":["ChildCmp","prop","useState","Input","setInput","style","marginLeft","onChange","e","preventDefault","target","value","selected","disabled","val","map","para","Counts","names","console","log","Clients","Comp","data","obj","count","sort","i","length","j","push","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iKAEe,SAASA,EAASC,GAC7B,MAA0BC,mBAAS,MAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAKA,OACI,gCACI,yBAAQC,MAAO,CAAEC,WAAY,OAASC,SANxB,SAACC,GACnBA,EAAEC,iBACFL,EAASI,EAAEE,OAAOC,QAId,UACI,wBAAQC,UAAQ,EAACC,UAAQ,EAAzB,+BACCZ,EAAKa,IAAIC,KAAI,SAACC,GACX,OAAO,wBAAQL,MAAOK,EAAKC,OAApB,SAA6BD,EAAKE,cAGjD,oBAAIb,MAAO,CAAEC,WAAY,OAAzB,SAAmCH,IAElCgB,QAAQC,IAAInB,EAAKa,QClB9B,IAGeO,EAHD,CAAC,UAAU,UAAU,OAAO,UAAU,OAAO,OAAO,MAAM,UAAU,OAAO,UACzF,UAAU,OAAO,UAAU,OAAO,OAAO,UAAU,OAAO,UAAU,OAAO,UAAU,OACrF,aAAa,aCCE,SAASC,IACpB,IAIIC,EAJAC,EAAI,GAGJC,EAAM,EAEVJ,EAAQK,OAEP,IAAI,IAAIC,EAAE,EAAGA,EAAEN,EAAQO,OAAQD,IAAI,CAC/BF,EAAM,EACN,IAAI,IAAII,EAAEF,EAAE,EAAGE,EAAER,EAAQO,OAAQC,IAC1BR,EAAQM,KAAKN,EAAQQ,IACpBJ,IAGRE,GAAGF,EAAM,EAENA,EADgB,IAAOJ,EAAQO,SAE/BL,EAAK,CACDL,MAAMG,EAAQM,GACdV,OAAOQ,GAEXD,EAAIM,KAAKP,IAKjB,OACI,8BACI,cAACvB,EAAD,CAAUc,IAAKU,MCpBZO,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACC,cAACV,EAAD,OCKUW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.eae2105f.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function ChildCmp(prop) {\r\n    const [Input, setInput] = useState(null)\r\n    const selectHandler = (e) => {\r\n        e.preventDefault()\r\n        setInput(e.target.value)\r\n    }\r\n    return (\r\n        <div>\r\n            <select style={{ marginLeft: \"45%\" }} onChange={selectHandler}>\r\n                <option selected disabled>-----select------</option>\r\n                {prop.val.map((para) => {\r\n                    return <option value={para.Counts}>{para.names}</option>\r\n                })}\r\n            </select>\r\n            <h2 style={{ marginLeft: \"48%\" }}>{Input}</h2>\r\n\r\n            {console.log(prop.val)}\r\n        </div>\r\n    )\r\n}\r\n","var Clients = [\"Bigcorp\",\"Bigcorp\",\"Acme\",\"Bigcorp\",\"Zork\",\"Zork\",\"Abc\",\"Bigcorp\",\"Acme\",\"Bigcorp\",\r\n\"Bigcorp\",\"Zork\",\"Bigcorp\",\"Zork\",\"Zork\",\"Bigcorp\",\"Acme\",\"Bigcorp\",\"Acme\",\"Bigcorp\",\"Acme\",\r\n\"Littlecorp\",\"Nadircorp\"];\r\nexport default Clients","import React,{useEffect} from 'react'\r\nimport ChildCmp from './ChildCmp';\r\nimport Clients from './Data'\r\nexport default function Comp() {\r\n    var obj=[]\r\n//   useEffect(() => {\r\n   \r\n    let count=1;\r\n    let data;\r\n    Clients.sort()\r\n    // console.log(Clients)\r\n     for(let i=0; i<Clients.length; i++){\r\n         count=1;\r\n         for(let j=i+1; j<Clients.length; j++){\r\n             if(Clients[i]===Clients[j]){\r\n                 count++;\r\n             }\r\n         }\r\n         i+=count-1;\r\n         let addableCount =(7/100)*Clients.length;\r\n         if(count>addableCount){\r\n            data={\r\n                names:Clients[i],\r\n                Counts:count\r\n            }\r\n            obj.push(data) \r\n         }\r\n    //    console.log(obj)\r\n     }\r\n//   }, [])\r\n    return (\r\n        <div>\r\n            <ChildCmp val={obj}/>\r\n        </div>\r\n    )\r\n}\r\n","\nimport Comp from './Comp';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Comp/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}